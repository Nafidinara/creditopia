type BoundingBox = record {
  left: float32;
  top: float32;
  right: float32;
  bottom: float32;
};

type Embedding = record {
  v0: vec float32;
};

type Person = record {
  label: text;
  score: float32;
};

type Detection = variant {
  Ok: BoundingBox;
  Err: Error;
};

type Addition = variant {
  Ok: Embedding;
  Err: Error;
};

type Recognition = variant {
  Ok: Person;
  Err: Error;
};

// Status of operations
type Status = variant {
  Success;
  Failed;
};

type Error = record {
  message: text;
};

type User = record {
  id: nat;
  name: text;
  types: text;
  image: vec<vec<u8>>;
  personimage: vec<vec<u8>>;
  status: Status;
}

service : {
    "detect": (image: blob) -> (Detection) query;
    "recognize": (image: blob) -> (Recognition);
    "add": (label: text, image: blob) -> (Addition);

    // These endpoints are used for incremental uploading of model files.
    "clear_face_detection_model_bytes": () -> ();
    "clear_face_recognition_model_bytes": () -> ();
    "append_face_detection_model_bytes": (bytes: blob) -> ();
    "append_face_recognition_model_bytes": (bytes: blob) -> ();
    "setup_models": () -> ();

    // These endpoints are used only for testing and benchmarking.
    "run_detection": () -> (Detection) query;
    "run_recognition": () -> (Recognition);

    // User

    // Create a new user
    public update func create_user(
        id: nat64,
        name: text,
        types: text,
        images: vec<u8>,
        personimage: vec<u8>
    ) -> Result<(), text>;

    // Get a user by ID
    public query func get_user(id: nat64) -> opt<User>;

    // Update user's information
    public update func update_user(id: nat64, new_name: text) -> Result<(), text>;

    // Delete a user by ID
    public update func delete_user(id: nat64) -> Result<(), text>;
}