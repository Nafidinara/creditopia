type BoundingBox = record {
  left: float32;
  top: float32;
  right: float32;
  bottom: float32;
};

type Embedding = record {
  v0: vec float32;
};

type Person = record {
  label: text;
  score: float32;
};

type Detection = variant {
  Ok: BoundingBox;
  Err: Error;
};

type Addition = variant {
  Ok: Embedding;
  Err: Error;
};

type Recognition = variant {
  Ok: Person;
  Err: Error;
};

// Status of operations
type Status = variant {
  Unverify;
  Success;
  Failed;
};

type Error = record {
  message: text;
};

type User = record {
  id: text;
  name: text;
  email: text;
  phone: text;
  address: text;
};
service : {
    "detect": (image: blob) -> (Detection) query;
    "recognize": (image: blob) -> (Recognition);
    "add": (label: text, image: blob) -> (Addition);

    // These endpoints are used for incremental uploading of model files.
    "clear_face_detection_model_bytes": () -> ();
    "clear_face_recognition_model_bytes": () -> ();
    "append_face_detection_model_bytes": (bytes: blob) -> ();
    "append_face_recognition_model_bytes": (bytes: blob) -> ();
    "setup_models": () -> ();

    // These endpoints are used only for testing and benchmarking.
    "run_detection": () -> (Detection) query;
    "run_recognition": () -> (Recognition);

    // User

    // Create a new user
    create_user: (id: text, name: text, email: text, phone: text, address: text ) -> (variant { Ok; Err: text });
    get_user: (text) -> (opt User) query;
    update_user: (text, text) -> (variant { Ok; Err: text });
    delete_user: (text) -> (variant { Ok; Err: text });
}